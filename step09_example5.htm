<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>step09_example5.html</title>
    <style>
      canvas {
        border: 1px solid red;
      }
    </style>
  </head>
  <body>
    <h1>canvas 요소 활용해 보기</h1>
    <p>잡은 토끼의 갯수 : <strong id="point">0</strong></p>

    <canvas id="myCanvas" width="800" height="500"></canvas>

    <script>
      //canvas 요소의 참조값
      let canvas = document.querySelector("#myCanvas");
      //canvas에 그림을 그릴 도구(context) 객체 얻어내기
      let context = canvas.getContext("2d");

      //canvas에 그릴 이미지 로딩하기
      let snipeImg = new Image(); // <img> 이 요소를 동적으로 만들어내는 것!
      snipeImg.src = "images/snipe.png";

      let holeImg = new Image();
      holeImg.src = "images/hole.png";

      // 배경 이미지
      const backImg = new Image();
      backImg.src = "images/background.jpg";

      //토끼 이미지 로딩
      const rabbitImg1 = new Image();
      rabbitImg1.src = "images/rabbit_1.png";
      const rabbitImg2 = new Image();
      rabbitImg2.src = "images/rabbit2.png";
      //로딩된 이미지를 배열에 담아 놓는다 ( 나중에 애니메이션 효과를 주기 위해)
      const rabbitImgs = [rabbitImg1, rabbitImg2];

      //풍선 이미지를 저장할 배열
      const bubbleImgs = [];
      //풍선 이미지 로딩(6개인데 파일 이름이 숫자만 달라지므로 for문 사용)
      for (let i = 0; i < 6; i++) {
        //풍선 이미지를 로딩해서
        let tmp = new Image();
        tmp.src = "images/b" + i + ".png";
        //배열에 누적 시키기
        bubbleImgs.push(tmp);
      }

      //snipe의 좌표
      let snipeX = 0,
        snipeY = 0;
      // 총알 구멍의 임시 좌표
      //   let holeX = 400,
      //     holeY = 250;

      // ---> 총알 구멍 객체(object)를 저장할 배열
      const holes = []; // 페이지 로딩 시점에는 총알 자국이 없기 떄문에 비어 있어야 함.
      //이후 반복문 돌면서 총알자국 그려내기

      //토끼의 좌표
      let rabbitX = 400,
        rabbitY = 250;
      //토끼 이미지 인덱스
      let rabbitIndex = 0;
      //카운트를 셀 변수
      let count = 0;

      //토끼 잡은 갯수 변수 설정 및 초기값 설정
      let point = 0;

      //효과음 로딩하기
      const fireSound = new Audio("sounds/fire.wav");
      const dieSound = new Audio("sounds/birddie.mp3");

      //시계다이얼 이미지 --> 사진을 어떻게 돌릴것인가.
      const dialImg = new Image();
      dialImg.src = "images/dial.png";
      //초침 이미지
      const secImg = new Image();
      secImg.src = "images/clock_sec.png";
      //시계를 그릴 좌표
      const clockX = 700;
      const clockY = 100;

      setInterval(() => {
        //여기 함수 내부는 1/100초 마다 한번씩 실행된다.
        // context.clearRect(0, 0, 800, 500);

        //함수가 호출될 때마다 count를 1씩 증가 시킨다
        count++;

        // 배경 이미지를 canvas 크기에 맞게 그린다
        context.drawImage(backImg, 0, 0, 800, 500);

        //회전
        // context.rotate(0.1);
        //괄호 안은 radian 단위

        //좌표계 평행이동
        // context.translate(1, 1);

        //현재 context의 정상상태(변화를 가하지 않은 상태)를 저장한다.
        context.save();
        //시계를 그릴 좌표로 평행 이동 한다.
        context.translate(clockX, clockY);
        //시계를 원점에 그리기
        context.drawImage(dialImg, 0 - 100, 0 - 100, 200, 200);
        //테스트로 초침을 그리기 전에 context를 30도 회전해서 그려보기
        // context.rotate((30 * Math.PI) / 180);
        //라디안이니까 30도를 만들기위해서
        // 30 * PI / 180 하면 라디안을 도로 바꿀 수 있음.
        context.rotate((count * Math.PI) / 180);

        //초침 그리기(시계 중심 좌표를 기준으로 그려본다)
        context.drawImage(secImg, 0 - 4, 0 - 90, 8, 90);
        //다른 그림에 영향이 가지 않도록 저장했던 정상상태로 contet를 되돌린다.
        context.restore();
        // 원래 캔버스는 좌상단에 일치하는 좌표곈데 시계를 그릴떄만 시계의 위치로 좌표계를 평행이동하여 그리고 다시 정상 좌표계(좌상단)으로 돌아감
        // 왜 이렇게 하냐면 --> 초침을 회전시키기 위해서
        //초침은 y축에 평행한것이기 때문에 초침을 회전시키기 위해서는 좌표계를 기울여서 y축이 이동하게 만든ㄷ ㅏ...
        // 시계만 다른 좌표계를 가지니까 그 좌표계를 이용하여 초침, 분침, 시침을 회전시키기 위해서

        //총알 구멍 이미지를 반복문 돌면서 모두 그린다(총을 계속 쏘면 총알 자국이 하나가 아니니까)
        for (let i = 0; i < holes.length; i++) {
          //i번째 총알 구멍 이미지 정보를 담고 있는 객체를 불러와서
          let tmp = holes[i];
          //거기에 담긴 x, y 좌표를 이용해서 총알 구멍을 그린다.
          context.drawImage(holeImg, tmp.x - 10, tmp.y - 10, 20, 20);
        }

        //토끼 그리기(쏴진 총알 위로 이미지가 올라오는 위치)
        context.drawImage(
          rabbitImgs[rabbitIndex],
          rabbitX - 50,
          rabbitY - 50,
          100,
          100
        );

        //풍선그리기
        for (let i = 0; i < bubbles.length; i++) {
          // i번째 풍선 정보를 가지고 있는 object를 참조해서
          let tmp = bubbles[i];
          //object안에 있는 정보를 바탕으로 풍선을 그린다.
          context.drawImage(
            bubbleImgs[tmp.index],
            tmp.x - 25,
            tmp.y - 25,
            50,
            50
          );
        }
        //풍선 움직이기
        for (let i = 0; i < bubbles.length; i++) {
          let tmp = bubbles[i];
          //각각의 풍선이 가지고 있는 speedX, speedY 값 만큼 x, y 좌표를 변화 시킨다.
          tmp.x += tmp.speedX;
          tmp.y += tmp.speedY;

          //위에서 움직인 직후 풍선이 화면을 벗어 났는지 판별해서
          let isOut = tmp.x < -25 || tmp.x > 825 || tmp.y < -25 || tmp.y > 525;
          //만일 벗어 났다면 (풍선 체크할때 제거될 수 있또록,..)
          if (isOut) {
            tmp.isOut = true;
            // tmp.isOut = isOut; 이거와 같다/
          }
        }

        //풍선 체크하기(화면을 벗어난 풍선은 제거하기!) --> 화면에서 벗어나면 bubbles에 있는 것들이 다 사라짐.

        for (let i = 0; i < bubbles.length; i++) {
          let tmp = bubbles[i];
          //만일 i번째 풍선이 화면을 벗어났다면
          if (tmp.isOut) {
            //bubbles 배열에서 i번째 방에서 부터 1개 잘라내기(삭제하기)
            bubbles.splice(i, 1);
          }
        }

        // //테스트 풍선그리기 ( 토끼 다음에 그려야함)
        // context.drawImage(
        //   bubbleImgs[bubbleIndex],
        //   bubbleX - 25,
        //   bubbleY - 25,
        //   50,
        //   50
        // );
        // //테스트 풍선 움직이기
        // bubbleX += speedX;
        // bubbleY += speedY;
        // // +1씩 되기 때문에 우하단으로 움직임.
        // // speedY = -1 이면 우상단으로 움직임

        // context.drawImage(holeImg, holeX - 10, holeY - 10, 20, 20);
        //                           폭의 반, 높이의 반 빼주면 이미지가 중앙이 됨

        //스나이프 그리기
        context.drawImage(snipeImg, snipeX - 50, snipeY - 50, 100, 100);

        //글자 출력하기 .fillText(글내용, 좌하단의 x, 좌하단의 y) --> 화면은 계속 다시그려지고 반복되니까 글자도 다시 그려줘야함
        //글자의 외곽선만 그릴거면 .strokeText()
        context.fillText("Point : " + point, 10, 30);

        if (count % 20 == 0) {
          // 20의 배수에서만 0이 됨
          //즉 위에는 1초에 100번 수행될 떄 이 함수 속은 카운트의 나머지가 0일때
          //즉 20의 배수일때만 실행이 시키겟다... -- > 1초에 20번

          //토끼 이미지 인덱스 1 증가시키기
          rabbitIndex++;
          //만일 존재하지 않는 인덱스라면 0으로 초기화하기
          if (rabbitIndex == 2) {
            rabbitIndex = 0;
          }
        }

        // 0~99 사이의 랜덤한 정수를 얻어내서
        let ranNum = parseInt(Math.random() * 50);
        // 우연이 50이 나올때까지만 (확률상 1초에 대략 1번 꼴)

        //토끼를 랜덤한 위치로 움직이게 하기
        //정수의 랜덤숫자를 얻어서 그 중 10이 나오면 토끼를 움직이게한다!
        // *100 이 숫자가 작아질수록 더 빨리 움직임
        if (ranNum == 10) {
          rabbitX = Math.random() * 700 + 50;
          rabbitY = Math.random() * 400 + 50;
        }
      }, 10); //1초에 100번 호출
      //즉 1초에 백번씩 배경그리고 총알자국 그리고 스나이프그림 그리고 계속 반복중.

      //풍선의 정보를 저장할 배열
      const bubbles = [];

      //글자의 크기, 글꼴
      context.font = "20px consolas";
      //글자의 색상
      context.fillStyle = "yellow";

      // //테스트용 //풍선 하나 당 5개의 정보 필요 //풍선은 6개
      // // --> 배열에 넣어서 반복문 돌려주자
      // let bubbleX = 400;
      // let bubbleY = 250;
      // //X,Y값이 지속적으로 증가해야 사선으로 풍선이미지가 이동
      // let bubbleIndex = 0;
      // // 얼만큼 증가시킬까?를 결정 짓는 값 1/100초 마다 X,Y방향으로 1px씩 (얼마나 이동할 것인지)
      // // let speedX = 1;
      // // let speedY = 1;
      // let speedX = Math.random() * 20 - 10; // -10에서 10 사이의 랜덤한 실수 얻어내기
      // let speedY = Math.random() * 20 - 10;

      // canvas 요소의 mousemove 이벤트 처리
      //  event는 마우스무브 이벤트 객체 {}가 전달되는 것임
      canvas.addEventListener("mousemove", (event) => {
        //이벤트가 발생한 곳의 canvas 내에서의 좌표
        //이벤트가 발생한곳의 canvas 내에서의 좌표를 snipeX, snipeY 에 반영
        snipeX = event.offsetX;
        snipeY = event.offsetY;
        //지정된 사각형 영역을 지우기 clearRect(x, y, width, height);
      });

      canvas.addEventListener("mousedown", (event) => {
        // mousedown 이벤트가 발생한 곳의 좌표를 변수에 담아놓고 아래서 2번 활용
        let x = event.offsetX;
        let y = event.offsetY;

        //이벤트가 발생한 곳의 좌표를 object에 담는다
        //여기가 실행될떄마다 새로운 오브젝트가 만들어진다.
        // const hole = { x: x, y: y };
        //          key: value
        const hole = { x, y }; //위의 표현식을 줄여서 이렇게 쓸 수 있다.(ECMA6)
        //holes 배열에 저장(누적) 시킨다.
        holes.push(hole);
        //재생 위치를 처음으로 리셋 후 재생하면 연속 재생 가능
        //총소리 파일이 2.4초이기때문에 클릭할때 마다 처음으로 리셋하지 않으면 2.4초 동안은 재생 되지 않음
        fireSound.currentTime = 0;
        //총소리 재생
        fireSound.play();

        // 토끼가 총에 맞았는지 판별해서 맞았으면 효과음 재생(if문)
        //토끼가 맞은게 사실이라면
        let isRabbitDie =
          rabbitX - 50 < x &&
          x < rabbitX + 50 &&
          rabbitY - 50 < y &&
          y < rabbitY + 50;

        if (isRabbitDie) {
          dieSound.currentTime = 0;
          dieSound.play();

          //토끼 잡은 갯수 증가시키기
          point++;
          //strong 요소의 innerText로 출력하기
          document.querySelector("#point").innerText = point;

          //풍선 만들기

          for (let i = 0; i < 6; i++) {
            //새로운 object를 하나 만들어서
            let tmp = {};
            //풍선 하나의 정보를 담고
            tmp.x = rabbitX;
            tmp.y = rabbitY;
            tmp.index = i;
            tmp.speedX = Math.random() * 10 - 5; // -5에서부터 5사이의 숫자
            tmp.speedY = Math.random() * 10 - 5;
            tmp.isOut = false; // 화면을 벗어났는지 여부(정보를 객체에 추가로 갖고있자.. )

            //오브젝트 작성법 두가지
            // let tmp2 = {
            //   x: rabbitX,
            //   y: rabbitY,
            //   index: i,
            //   speedX: Math.random() * 10 - 5,
            //   speedY: Math.random() * 10 - 5,
            //   isOut: false,
            // };

            //배열에 누적시키기
            bubbles.push(tmp);

            //토끼가 총에 맞았으니 토끼를 바로 랜덤한 위치로 움직이게 하기

            rabbitX = Math.random() * 700 + 50;
            rabbitY = Math.random() * 400 + 50;
          }
        }

        /* 이 부분은 그냥 참고 */
        // holeX = event.offsetX;
        // holeY = event.offsetY;
        //총알을 쏘고 나면 왜 총알이 계속 그 자리에 있을까 1초에 백번씩 다시 그리고 있기 떄문에.
        // 총알 구멍의 위치를 복원시키기 위해선 내가 총쏜 위치 x,y가 다 있어야함.
        // 마우스 다운이 일어날때마다 x,y묶음이 계속 추가가 되어야함. --> 오브젝트에 담아버리잣..
        // 총알 구멍 하나당 오브젝트1개 --> 여러개의 오브젝트를 (여러 총알 구멍들을) 배열에 담아버리잣...

        // 총알 하나의 x,y 좌표는 object에 저장하면 좋을 듯...
        // {x:100, y:20}....
        // 총알 하나의 정보를 담고있는 object가 여러개면 array에 저장하면 좋을듯..
        // [{}, {}, {}, {}, ...]
      });
    </script>
  </body>
</html>
